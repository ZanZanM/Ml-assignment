# -*- coding: utf-8 -*-
"""Naive Bayes

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CGhZJtXV10Uein0Jw6ckS2IhZqCqjMlp
"""

age = ["16", "18", "18", "18", "20", "20", "22", "26", "30", "30"]#age features
country = ["uk", "spain", "spain", "spain", "germany", "germany", "germany", "uk", "uk", "uk" ]#country features
gender = ["female", "male", "female", "male","female", "male", "male", "female", "male", "female"]#gender features
music = ["pop", "pop", "pop", "pop", "rock", "rock", "rock", "jazz", "jazz", "jazz"]#Labels - output of the classifier

!pip install sklearn
from sklearn import preprocessing 
le = preprocessing.LabelEncoder()#create a label encoder
age_encoded = le.fit_transform(age)#Fit the encoder on the age features
print(age_encoded)
country_encoded = le.fit_transform(country)#Fit the encoder on the country features.
print(country_encoded)
gender_encoded = le.fit_transform(gender)#Fit the encoder on the gender features.
print(gender_encoded)
music_encoded = le.fit_transform(music)#Labels encoded
print(music_encoded)

features = list(zip(age_encoded, country_encoded, gender_encoded))#Make tuples from the two sets of features
print(features)

from sklearn.neighbors import KNeighborsClassifier
model = KNeighborsClassifier(n_neighbors=3, metric = "euclidean")#Build a 3NN classifier using Euclidean distance metric.
model.fit(features, music_encoded)#Fit the KNN classifier on the training set and the corresponding labels.

print(result)
print(list(le.inverse_transform([1])))

age = ["16", "18", "18", "18", "20", "20", "22", "26", "30", "30"]
country = ["uk", "spain", "spain", "spain", "germany", "germany", "germany", "uk", "uk", "uk" ]
gender = ["female", "male", "female", "male","female", "male", "male", "female", "male", "female"]
music = ["pop", "pop", "pop", "pop", "rock", "rock", "rock", "jazz", "jazz", "jazz"]

!pip install sklearn
from sklearn import preprocessing 
le = preprocessing.LabelEncoder()
age_encoded = le.fit_transform(age)
print(age_encoded)
country_encoded = le.fit_transform(country)
print(country_encoded)
gender_encoded = le.fit_transform(gender)
print(gender_encoded)
music_encoded = le.fit_transform(music)
print(music_encoded)

features = list(zip(age_encoded, country_encoded, gender_encoded))
print(features)

from sklearn.naive_bayes import MultinomialNB
model = MultinomialNB() # Build a Multinomial Naive Bayes classifier.
model.fit(features, music_encoded) # Fit the Naive Bayes classifier on the training set and the corresponding labels.
result = model.predict([[0,1,2]]) #Prediction
print(result)
print(list(le.inverse_transform([1])))

result = model.predict([[0,1],[0,2]]) 
print(result) 
print(list(le.inverse_transform([1])))